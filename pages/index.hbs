---
title: getting started
---
<div class="splash container big-bottom" id="banner">
  <div id="title" class="sixteen columns center-aligned big-bottom" style="position: relative">
    <div id="sigma-title"></div>
    <div class="title">
      <h1 class="sigma">sigma<span class="red">js</span></h1>
      <h5>v1.0.0</h5>
    </div>
    <div id="start">
      <a class="boo blank" id="link-to-tutorial" href="#"><i class="fa fa-globe left"></i>have a tutorial</a>
      <a class="boo" id="link-to-download" href="#">download<i class="fa fa-download"></i></a>
    </div>
  </div>
  <div class="line"></div>
</div>



<div class="container big-bottom" id="intro">
  <div class="sixteen columns big-bottom">
    <p>Sigma is a JavaScript library <strong>dedicated to graph drawing</strong>. It makes easy to publish networks on Web pages, and allows developers to integrate networks explorations in rich Web applications.</p>
  </div>
</div>

<script src="{{assets}}/js/jquery.min.js"></script>
<script src="{{assets}}/js/jquery-scrolltofixed.js"></script>
<script src="{{assets}}/js/konami.js"></script>
<script src="{{assets}}/js/sigma.min.js"></script>
<script src="{{assets}}/js/sigma.plugins.animate.js"></script>
<script src="{{assets}}/js/surprise.js"></script>
<script src="{{assets}}/js/highlight.pack.js"></script>

<script>
  $(document).ready(function() {
    hljs.initHighlightingOnLoad();

    var _wrapper = $('#wrapper'),
        _header = $('header'),
        _footer = $('footer'),
        _belowFooter = $('.below-the-footer'),
        _config = {
          headerHeight: 63
        };

    // Dock the header to the top of the window when scrolled past the banner.
    _header.scrollToFixed();

    // Dock the footer to the bottom of the page, but scroll up to reveal more
    $('footer').scrollToFixed({
      bottom: 0,
      limit: function() {
        return _belowFooter.offset().top - _footer.outerHeight();
      }
    });

    // Deal with the menu:
    $('header a[href^="#"]').click(function(e) {
      $('.menu', _header).removeClass('visible');
      $('html, body').animate({
        scrollTop: $($(this).attr('href')).offset().top - _config.headerHeight
      });
      return false;
    });

    $(window).on('scroll', function() {
      if (!$(window).scrollTop())
        _header.removeClass('scrolled');
      else
        _header.addClass('scrolled');

      $('a[href^="#"]', _header).removeClass('selected').each(function() {
        var dom,
            target = $(this),
            id = target.attr('href');

        // Check that the scroll is not null:
        if (!$(window).scrollTop())
          return false;

        if (
          (dom = $(id)).length &&
          $(window).scrollTop() < dom.position().top - _header.height() - _config.margin + 1
        ) {

          $('a[href="' + id + '"]', _header).addClass('selected');
          return false;
        }
      });
    });

    $('.menu-button').click(function() {
      $('.menu', _header).toggleClass('visible');
      $(this).closest('.menu-toggler').toggleClass('visible');
    });

    // Sigma showcase in title:
    $.ajax({
      dataType: 'json',
      url: '{{assets}}/data/les_miserables.json',
      success: function(graph) {
        var lines = 15,
            prefix = 'file_';

        // Sort nodes:
        graph.nodes = graph.nodes.sort(function(a, b) {
          return +(b.size - a.size) * 2 - 1;
        });

        // Set views:
        graph.nodes.forEach(function(node, i) {
          node.grid_x = 100 * (i % lines);
          node.grid_y = 100 * Math.floor(i / lines);
          node.grid_color = '#ccc';
          node.x = node.file_x = node.x;
          node.y = node.file_y = node.y;
          node.color = node.file_color = node.color;
        });

        // Initialize sigma:
        var s = new sigma({
          graph: graph,
          renderer: {
            container: document.getElementById('sigma-title'),
            type: 'canvas'
          },
          settings: {
            enableCamera: false,
            enableHovering: false,
            mouseEnabled: false,
            drawLabels: false,
            animationsTime: 500
          }
        });

        function animate(p) {
          if (p !== prefix) {
            prefix = p || (prefix === 'grid_' ? 'file_' : 'grid_');
            sigma.plugins.animate(
              s,
              {
                color: prefix + 'color',
                x: prefix + 'x',
                y: prefix + 'y'
              }
            );
          }
        }

        $('#title').bind('mouseenter', function() {
          animate('grid_');
        }).bind('mouseleave', function() {
          animate('file_');
        }).bind('touchstart', function() {
          animate();
        });
      }
    });

    // Sigma first use case:
    new sigma({
      container: $('.box#sigma-first')[0],
      graph: {
        "nodes": [
          {
            "id": "n0",
            "label": "A node",
            "x": 0,
            "y": 0,
            "size": 3
          },
          {
            "id": "n1",
            "label": "Another node",
            "x": 3,
            "y": 1,
            "size": 2
          },
          {
            "id": "n2",
            "label": "And a last one",
            "x": 1,
            "y": 3,
            "size": 1
          }
        ],
        "edges": [
          {
            "id": "e0",
            "source": "n0",
            "target": "n1"
          },
          {
            "id": "e1",
            "source": "n1",
            "target": "n2"
          },
          {
            "id": "e2",
            "source": "n2",
            "target": "n0"
          }
        ]
      },
      settings: {
        defaultNodeColor: '#ec5148',
        sideMargin: 2
      }
    });
  });
</script>
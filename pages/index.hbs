---
title: getting started
---
<div class="splash container big-bottom" id="banner">
  <div id="title" class="sixteen columns center-aligned big-bottom" style="position: relative">
    <div id="sigma-title"></div>
    <div class="title">
      <h1 class="sigma">sigma<span class="red">js</span></h1>
    </div>
    <div id="start">
      {{!-- <a class="boo blank" id="link-to-tutorial" href="#"><i class="fa fa-globe left"></i>have a tutorial</a> --}}
      <h5 id="version">v1.0.0</h5>
      {{!-- <a class="boo" id="link-to-download" href="#">download<i class="fa fa-download"></i></a> --}}
    </div>
  </div>
  <div class="line"></div>
</div>



<div class="container big-bottom" id="intro">
  <div class="sixteen columns big-bottom">
    <p>Sigma is a JavaScript library <strong>dedicated to graph drawing</strong>. It makes easy to publish networks on Web pages, and allows developers to integrate networks explorations in rich Web applications.</p>
  </div>
</div>

  <div class="container big-bottom section" id="get-started">
    <div class="headline eight columns">
      <h3 class="green">Get started with sigma.</h3>
    </div>
    <div class="description eight columns">
      <p>The following example shows how simple it is to use sigma to display a JSON encoded graph file.</p>
    </div>
    <div class="one-third column">
      <h5>Data</h5>
      <div class="box">
<pre><code>{
  &quot;nodes&quot;: [
    {
      &quot;id&quot;: &quot;n0&quot;,
      &quot;label&quot;: &quot;A node&quot;,
      &quot;x&quot;: 0,
      &quot;y&quot;: 0,
      &quot;size&quot;: 3
    },
    {
      &quot;id&quot;: &quot;n1&quot;,
      &quot;label&quot;: &quot;Another node&quot;,
      &quot;x&quot;: 3,
      &quot;y&quot;: 1,
      &quot;size&quot;: 2
    },
    {
      &quot;id&quot;: &quot;n2&quot;,
      &quot;label&quot;: &quot;And a last one&quot;,
      &quot;x&quot;: 1,
      &quot;y&quot;: 3,
      &quot;size&quot;: 1
    }
  ],
  &quot;edges&quot;: [
    {
      &quot;id&quot;: &quot;e0&quot;,
      &quot;source&quot;: &quot;n0&quot;,
      &quot;target&quot;: &quot;n1&quot;
    },
    {
      &quot;id&quot;: &quot;e1&quot;,
      &quot;source&quot;: &quot;n1&quot;,
      &quot;target&quot;: &quot;n2&quot;
    },
    {
      &quot;id&quot;: &quot;e2&quot;,
      &quot;source&quot;: &quot;n2&quot;,
      &quot;target&quot;: &quot;n0&quot;
    }
  ]
}

</code></pre>
      </div>
    </div>
    <div class="one-third column">
      <h5>HTML</h5>
      <div class="box">
<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;style type=&quot;text/css&quot;&gt;
  #container {
    max-width: 400px;
    height: 400px;
    margin: auto;
  }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;sigma.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;sigma.parsers.json.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  sigma.parsers.json(&#039;data.json&#039;, {
    container: &#039;container&#039;,
    settings: {
      defaultNodeColor: &#039;#ec5148&#039;
    }
  });
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
      </div>
    </div>
    <div class="one-third column">
      <h5>Result</h5>
      <div class="box" id="sigma-first"></div>
    </div>
    <div class="line"></div>
  </div>



  <div class="container big-bottom section" id="features">

    <div class="eight columns">
      <h3 class="headline green">Features.</h3>
    </div>

    <div class="description eight columns">
      <h4 class="green">Dedicated to graph drawing.</h4>
      <p><span class="sigma">sigma<span class="red">js</span></span> provides a lot of built-in features, such as Canvas and WebGL renderers or mouse and touch support, to make networks manipulation on Web pages smooth and fast for the user.</p>
    </div>

    <div class="one-third column">
      <h5 class="underline"><i class="fa fa-check-square-o green"></i>Plug and play!</h5>
      <div class="textbox">
        <p>The default configuration of <span class="sigma">sigma<span class="red">js</span></span> deals with mouse and touch support, refreshing and rescaling when the container's size changes, rendering on WebGL if the browser supports it and Canvas else, recentering the graph and adapting the nodes and edges sizes to the screen...</p>
      </div>
    </div>

    <div class="one-third column">
      <h5 class="underline"><i class="fa fa-pencil green"></i>Custom rendering</h5>
      <div class="textbox">
        <p><span class="sigma">sigma<span class="red">js</span></span> provides a lot of different settings to make it easy to customize how to draw and interact with networks. And you can also directly add your own function to your scripts to render nodes and edges <em>the exact way you want</em>.</p>
      </div>
    </div>

    <div class="one-third column">
      <h5 class="underline"><i class="fa fa-puzzle-piece green"></i>Highly extensible</h5>
      <div class="textbox">
        <p><span class="sigma">sigma<span class="red">js</span></span> is a rendering engine, and it is up to you to add all the interactivity you want. The public API makes it possible to modify the data, move the camera, refresh the rendering, listen to events...</p>
      </div>
    </div>

    <div class="line"></div>
  </div>



  <div class="container big-bottom section" id="usecases">
    <div class="eight columns">
      <h3 class="headline green">Use cases.</h3>
    </div>
    <div class="description eight columns">
      <h4 class="green">From beginners to advanced users.</h4>
      <p><span class="sigma">sigma<span class="red">js</span></span> aims to help you display networks on the Web, from simple interactive publications of networks to rich Web applications featuring dynamic networks exploration.</p>
    </div>

    <div class="one-third column">
      <h5 class="underline"><i class="fa fa-coffee"></i>Display a network</h5>
      <div class="textbox">
        <p>You can just instanciate sigma by giving it the data and the DOM container, and it works. And for <a href="https://github.com/jacomyal/sigma.js/tree/draft-v1.0.0/plugins/sigma.parsers.json">JSON</a> or <a href="https://github.com/jacomyal/sigma.js/tree/draft-v1.0.0/plugins/sigma.parsers.gexf">GEXF</a> encoded graphs, the related plugin will deal with loading and parsing the file.</p>
      </div>
    </div>

    <div class="one-third column">
      <h5 class="underline"><i class="fa fa-coffee"></i><i class="fa fa-coffee"></i>Add some basic interaction</h5>
      <div class="textbox">
        <p>Update the data and refresh the drawing when you want. Bind custom functions to sigma's events to adapt the interactions to the needs of your application.</p>
      </div>
    </div>

    <div class="one-third column">
      <h5 class="underline"><i class="fa fa-coffee"></i><i class="fa fa-coffee"></i><i class="fa fa-coffee"></i>Develop and use plugins</h5>
      <div class="textbox">
        <p>For more complex use cases, it is possible to develop and use plugins that add features to sigma. Some are already available <a href="https://github.com/jacomyal/sigma.js/tree/draft-v1.0.0/plugins">on the repository</a>, for <a href="https://github.com/jacomyal/sigma.js/tree/draft-v1.0.0/plugins/sigma.plugins.animate">animating the graph</a> or apply a <a href="https://github.com/jacomyal/sigma.js/tree/draft-v1.0.0/plugins/sigma.layout.forceAtlas2">force-directed layout</a> to your graph.</p>
      </div>
    </div>

    <div class="line"></div>
  </div>



  <div class="container big-bottom section" id="references">
    <div class="sixteen columns">
      <h3 class="headline green">References.</h3>
    </div>

    <div class="eight columns">
      <h5 class="underline"><i class="fa fa-wrench green"></i>Documentation</h5>
      <div class="textbox">
        <p>Many different resources are available to help you, such as <a href="https://github.com/jacomyal/sigma.js/wiki">the Wiki</a>, <a href="https://github.com/jacomyal/sigma.js/tree/draft-v1.0.0/examples">the examples</a> or <a href="https://github.com/jacomyal/sigma.js/tree/draft-v1.0.0/plugins">the plugins</a>. And if your questions remain unsolved, you can <a href="https://github.com/jacomyal/sigma.js/issues">post an issue</a> on the Github repository.</p>
      </div>
    </div>
    <div class="eight columns">
      <h5 class="underline"><i class="fa fa-terminal green"></i>Source code</h5>
      <div class="textbox">
        <p>The source code is tested, commented, and published on Github under the MIT License. And contributions are welcome! Please read the related paragraph before getting started, before sending pull requests.</p>
      </div>
    </div>

    <div class="line"></div>
  </div>



  <div class="container big-bottom section" id="tutorial">
    <div class="sixteen columns">
      <h3 class="headline green">An actual advanced code sample.</h3>
    </div>

    <div class="sixteen columns">
      <div class="textbox">
        <p>TODO TOTO TUTU.</p>
      </div>
    </div>
  </div>


<script src="{{assets}}/js/jquery.min.js"></script>
<script src="{{assets}}/js/jquery-scrolltofixed.js"></script>
<script src="{{assets}}/js/konami.js"></script>
<script src="{{assets}}/js/sigma.min.js"></script>
<script src="{{assets}}/js/sigma.plugins.animate.js"></script>
<script src="{{assets}}/js/surprise.js"></script>
<script src="{{assets}}/js/highlight.pack.js"></script>

<script>
  $(document).ready(function() {
    hljs.initHighlightingOnLoad();

    var _wrapper = $('#wrapper'),
        _header = $('header'),
        _footer = $('footer'),
        _belowFooter = $('.below-the-footer'),
        _config = {
          headerHeight: 63
        };

    // Dock the header to the top of the window when scrolled past the banner.
    _header.scrollToFixed();

    // Dock the footer to the bottom of the page, but scroll up to reveal more
    $('footer').scrollToFixed({
      bottom: 0,
      limit: function() {
        return _belowFooter.offset().top - _footer.outerHeight();
      }
    });

    // Deal with the menu:
    $('header a[href^="#"]').click(function(e) {
      $('.menu', _header).removeClass('visible');
      $('html, body').animate({
        scrollTop: $($(this).attr('href')).offset().top - _config.headerHeight
      });
      return false;
    });

    $(window).on('scroll', function() {
      if (!$(window).scrollTop())
        _header.removeClass('scrolled');
      else
        _header.addClass('scrolled');

      $('a[href^="#"]', _header).removeClass('selected').each(function() {
        var dom,
            target = $(this),
            id = target.attr('href');

        // Check that the scroll is not null:
        if (!$(window).scrollTop())
          return false;

        if (
          (dom = $(id)).length &&
          $(window).scrollTop() < dom.position().top - _header.height() - _config.margin + 1
        ) {

          $('a[href="' + id + '"]', _header).addClass('selected');
          return false;
        }
      });
    });

    $('.menu-button').click(function() {
      $('.menu', _header).toggleClass('visible');
      $(this).closest('.menu-toggler').toggleClass('visible');
    });

    // Sigma showcase in title:
    $.ajax({
      dataType: 'json',
      url: '{{assets}}/data/les_miserables.json',
      success: function(graph) {
        var lines = 15,
            prefix = 'file_';

        // Sort nodes:
        graph.nodes = graph.nodes.sort(function(a, b) {
          return +(b.size - a.size) * 2 - 1;
        });

        // Set views:
        graph.nodes.forEach(function(node, i) {
          node.grid_x = 100 * (i % lines);
          node.grid_y = 100 * Math.floor(i / lines);
          node.grid_color = '#ccc';
          node.x = node.file_x = node.x;
          node.y = node.file_y = node.y;
          node.color = node.file_color = node.color;
        });

        // Initialize sigma:
        var s = new sigma({
          graph: graph,
          renderer: {
            container: document.getElementById('sigma-title'),
            type: 'canvas'
          },
          settings: {
            enableCamera: false,
            enableHovering: false,
            mouseEnabled: false,
            drawLabels: false,
            animationsTime: 500
          }
        });

        function animate(p) {
          if (p !== prefix) {
            prefix = p || (prefix === 'grid_' ? 'file_' : 'grid_');
            sigma.plugins.animate(
              s,
              {
                color: prefix + 'color',
                x: prefix + 'x',
                y: prefix + 'y'
              }
            );
          }
        }

        $('#title').bind('mouseenter', function() {
          animate('grid_');
        }).bind('mouseleave', function() {
          animate('file_');
        }).bind('touchstart', function() {
          animate();
        });
      }
    });

    // Sigma first use case:
    new sigma({
      container: $('.box#sigma-first')[0],
      graph: {
        "nodes": [
          {
            "id": "n0",
            "label": "A node",
            "x": 0,
            "y": 0,
            "size": 3
          },
          {
            "id": "n1",
            "label": "Another node",
            "x": 3,
            "y": 1,
            "size": 2
          },
          {
            "id": "n2",
            "label": "And a last one",
            "x": 1,
            "y": 3,
            "size": 1
          }
        ],
        "edges": [
          {
            "id": "e0",
            "source": "n0",
            "target": "n1"
          },
          {
            "id": "e1",
            "source": "n1",
            "target": "n2"
          },
          {
            "id": "e2",
            "source": "n2",
            "target": "n0"
          }
        ]
      },
      settings: {
        defaultNodeColor: '#ec5148',
        sideMargin: 2
      }
    });
  });
</script>
